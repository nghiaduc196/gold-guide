<?php

/**
 * @file
 * Functions to support theming in the nttcom theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\views\Form\ViewsForm;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function nttcom_preprocess_html(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
function nttcom_preprocess_page_title(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function nttcom_preprocess_maintenance_page(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function nttcom_preprocess_page(&$variables) {
  $type = \Drupal::request()->query->get('type');
  if (!empty($type)) {
    $variables['role_login'] = '';
    if ($type === 'guest') {
      $variables['role_login'] = 'customer-login';
    }
    if ($type === 'guide') {
      $variables['role_login'] = 'guide-login';
    }
    if ($type === 'system') {
      $variables['role_login'] = 'office-login';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function nttcom_preprocess_node(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function nttcom_preprocess_block(&$variables) {
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $langId = $language->getId();
  $langName = $language->getName();
  $variables['language'] = $langId;
  if ($langName == '英語') {
    $langName = 'English';
  }
  $variables['language_name'] = $langName;
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function nttcom_preprocess_menu(&$variables) {

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function nttcom_theme_suggestions_form_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_form_alter().
 */
function nttcom_form_alter(&$form, FormStateInterface $form_state, $form_id) {

}

/**
 * Implements hook_preprocess_links__media_library_menu().
 */
function nttcom_preprocess_links__media_library_menu(array &$variables) {

}

/**
 * Implements hook_preprocess_image_widget().
 */
function nttcom_preprocess_image_widget(&$variables) {
}

/**
 * Implements template_preprocess_links().
 */
function nttcom_preprocess_links(&$variables) {

}


/**
 * Implements hook_theme_suggestions_page_alter().
 */
function nttcom_theme_suggestions_page_alter(array &$suggestions, array $variables, $hook) {
  $router = Drupal::routeMatch()->getRouteName();
  $arr_routes = [
    'entity.user.canonical',
    'nttcom_change_pwd_page.change_password',
    'nttcom_change_pwd_page.change_password_form',
    'nttcom_calendar.my-calendar',
    'nttcom_user.cancel_account'
  ];
  if (in_array($router, $arr_routes)) {
    $suggestions[] = $hook . '__my_account';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nttcom_preprocess_menu__account(&$variables) {
  if ($variables['logged_in']) {

  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function nttcom_theme_suggestions_user_alter(array &$suggestions, array $variables, $hook) {
  $suggestions[] = $hook . '__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nttcom_theme_suggestions_form_element_alter(array &$suggestions, array $variables, $hook) {
  $route = Drupal::routeMatch()->getRouteName();
  if ($route == 'user.login' || $route == 'user.register') {
    $suggestions[] = $hook . '__user_' . $variables['element']['#name'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nttcom_theme_suggestions_input_alter(array &$suggestions, array $variables, $hook) {
  $route = Drupal::routeMatch()->getRouteName();
  if ($route == 'user.login') {
    $suggestions[] = $hook . '__user_' . $variables['element']['#name'];
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function nttcom_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'form' & !empty($variables['element']['#id'])) {
    // $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
  }
}

